// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/CookieService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CookieService_CookieCreate_FullMethodName      = "/pb.CookieService/CookieCreate"
	CookieService_ParallelCookieGet_FullMethodName = "/pb.CookieService/ParallelCookieGet"
	CookieService_LinearCookieGet_FullMethodName   = "/pb.CookieService/LinearCookieGet"
)

// CookieServiceClient is the client API for CookieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CookieServiceClient interface {
	CookieCreate(ctx context.Context, in *StringDataMessage, opts ...grpc.CallOption) (*StringDataMessage, error)
	ParallelCookieGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringDataMessage, error)
	LinearCookieGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringDataMessage, error)
}

type cookieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCookieServiceClient(cc grpc.ClientConnInterface) CookieServiceClient {
	return &cookieServiceClient{cc}
}

func (c *cookieServiceClient) CookieCreate(ctx context.Context, in *StringDataMessage, opts ...grpc.CallOption) (*StringDataMessage, error) {
	out := new(StringDataMessage)
	err := c.cc.Invoke(ctx, CookieService_CookieCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieServiceClient) ParallelCookieGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringDataMessage, error) {
	out := new(StringDataMessage)
	err := c.cc.Invoke(ctx, CookieService_ParallelCookieGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieServiceClient) LinearCookieGet(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringDataMessage, error) {
	out := new(StringDataMessage)
	err := c.cc.Invoke(ctx, CookieService_LinearCookieGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CookieServiceServer is the server API for CookieService service.
// All implementations should embed UnimplementedCookieServiceServer
// for forward compatibility
type CookieServiceServer interface {
	CookieCreate(context.Context, *StringDataMessage) (*StringDataMessage, error)
	ParallelCookieGet(context.Context, *emptypb.Empty) (*StringDataMessage, error)
	LinearCookieGet(context.Context, *emptypb.Empty) (*StringDataMessage, error)
}

// UnimplementedCookieServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCookieServiceServer struct {
}

func (UnimplementedCookieServiceServer) CookieCreate(context.Context, *StringDataMessage) (*StringDataMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CookieCreate not implemented")
}
func (UnimplementedCookieServiceServer) ParallelCookieGet(context.Context, *emptypb.Empty) (*StringDataMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParallelCookieGet not implemented")
}
func (UnimplementedCookieServiceServer) LinearCookieGet(context.Context, *emptypb.Empty) (*StringDataMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinearCookieGet not implemented")
}

// UnsafeCookieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CookieServiceServer will
// result in compilation errors.
type UnsafeCookieServiceServer interface {
	mustEmbedUnimplementedCookieServiceServer()
}

func RegisterCookieServiceServer(s grpc.ServiceRegistrar, srv CookieServiceServer) {
	s.RegisterService(&CookieService_ServiceDesc, srv)
}

func _CookieService_CookieCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringDataMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieServiceServer).CookieCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CookieService_CookieCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieServiceServer).CookieCreate(ctx, req.(*StringDataMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CookieService_ParallelCookieGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieServiceServer).ParallelCookieGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CookieService_ParallelCookieGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieServiceServer).ParallelCookieGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CookieService_LinearCookieGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieServiceServer).LinearCookieGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CookieService_LinearCookieGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieServiceServer).LinearCookieGet(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CookieService_ServiceDesc is the grpc.ServiceDesc for CookieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CookieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CookieService",
	HandlerType: (*CookieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CookieCreate",
			Handler:    _CookieService_CookieCreate_Handler,
		},
		{
			MethodName: "ParallelCookieGet",
			Handler:    _CookieService_ParallelCookieGet_Handler,
		},
		{
			MethodName: "LinearCookieGet",
			Handler:    _CookieService_LinearCookieGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/CookieService.proto",
}
