// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/FileService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileService_FilesInfoGetHandler_FullMethodName = "/pb.FileService/FilesInfoGetHandler"
	FileService_FileInfoGetHandler_FullMethodName  = "/pb.FileService/FileInfoGetHandler"
	FileService_DeleteFileHandler_FullMethodName   = "/pb.FileService/DeleteFileHandler"
	FileService_UploadFile_FullMethodName          = "/pb.FileService/UploadFile"
	FileService_DownloadFile_FullMethodName        = "/pb.FileService/DownloadFile"
	FileService_UpdateFile_FullMethodName          = "/pb.FileService/UpdateFile"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	FilesInfoGetHandler(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllFileInfoResponse, error)
	FileInfoGetHandler(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	DeleteFileHandler(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (FileService_DownloadFileClient, error)
	UpdateFile(ctx context.Context, opts ...grpc.CallOption) (FileService_UpdateFileClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) FilesInfoGetHandler(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllFileInfoResponse, error) {
	out := new(AllFileInfoResponse)
	err := c.cc.Invoke(ctx, FileService_FilesInfoGetHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) FileInfoGetHandler(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, FileService_FileInfoGetHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteFileHandler(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileService_DeleteFileHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], FileService_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceUploadFileClient{stream}
	return x, nil
}

type FileService_UploadFileClient interface {
	Send(*FileTransferMessage) error
	CloseAndRecv() (*FileUploadResult, error)
	grpc.ClientStream
}

type fileServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceUploadFileClient) Send(m *FileTransferMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceUploadFileClient) CloseAndRecv() (*FileUploadResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (FileService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], FileService_DownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_DownloadFileClient interface {
	Recv() (*FileTransferMessage, error)
	grpc.ClientStream
}

type fileServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceDownloadFileClient) Recv() (*FileTransferMessage, error) {
	m := new(FileTransferMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) UpdateFile(ctx context.Context, opts ...grpc.CallOption) (FileService_UpdateFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[2], FileService_UpdateFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceUpdateFileClient{stream}
	return x, nil
}

type FileService_UpdateFileClient interface {
	Send(*FileUpdateMessage) error
	CloseAndRecv() (*FileUploadResult, error)
	grpc.ClientStream
}

type fileServiceUpdateFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceUpdateFileClient) Send(m *FileUpdateMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceUpdateFileClient) CloseAndRecv() (*FileUploadResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations should embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	FilesInfoGetHandler(context.Context, *emptypb.Empty) (*AllFileInfoResponse, error)
	FileInfoGetHandler(context.Context, *FileRequest) (*FileInfo, error)
	DeleteFileHandler(context.Context, *FileRequest) (*emptypb.Empty, error)
	UploadFile(FileService_UploadFileServer) error
	DownloadFile(*FileRequest, FileService_DownloadFileServer) error
	UpdateFile(FileService_UpdateFileServer) error
}

// UnimplementedFileServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) FilesInfoGetHandler(context.Context, *emptypb.Empty) (*AllFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesInfoGetHandler not implemented")
}
func (UnimplementedFileServiceServer) FileInfoGetHandler(context.Context, *FileRequest) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileInfoGetHandler not implemented")
}
func (UnimplementedFileServiceServer) DeleteFileHandler(context.Context, *FileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileHandler not implemented")
}
func (UnimplementedFileServiceServer) UploadFile(FileService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileServiceServer) DownloadFile(*FileRequest, FileService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileServiceServer) UpdateFile(FileService_UpdateFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_FilesInfoGetHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).FilesInfoGetHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_FilesInfoGetHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).FilesInfoGetHandler(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_FileInfoGetHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).FileInfoGetHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_FileInfoGetHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).FileInfoGetHandler(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteFileHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFileHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_DeleteFileHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFileHandler(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).UploadFile(&fileServiceUploadFileServer{stream})
}

type FileService_UploadFileServer interface {
	SendAndClose(*FileUploadResult) error
	Recv() (*FileTransferMessage, error)
	grpc.ServerStream
}

type fileServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceUploadFileServer) SendAndClose(m *FileUploadResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceUploadFileServer) Recv() (*FileTransferMessage, error) {
	m := new(FileTransferMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).DownloadFile(m, &fileServiceDownloadFileServer{stream})
}

type FileService_DownloadFileServer interface {
	Send(*FileTransferMessage) error
	grpc.ServerStream
}

type fileServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceDownloadFileServer) Send(m *FileTransferMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_UpdateFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).UpdateFile(&fileServiceUpdateFileServer{stream})
}

type FileService_UpdateFileServer interface {
	SendAndClose(*FileUploadResult) error
	Recv() (*FileUpdateMessage, error)
	grpc.ServerStream
}

type fileServiceUpdateFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceUpdateFileServer) SendAndClose(m *FileUploadResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceUpdateFileServer) Recv() (*FileUpdateMessage, error) {
	m := new(FileUpdateMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FilesInfoGetHandler",
			Handler:    _FileService_FilesInfoGetHandler_Handler,
		},
		{
			MethodName: "FileInfoGetHandler",
			Handler:    _FileService_FileInfoGetHandler_Handler,
		},
		{
			MethodName: "DeleteFileHandler",
			Handler:    _FileService_DeleteFileHandler_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileService_DownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateFile",
			Handler:       _FileService_UpdateFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/FileService.proto",
}
